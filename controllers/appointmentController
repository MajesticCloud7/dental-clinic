const express = require('express');
var router = express.Router();
const { Appointment } = require("../models/appointment.model");
const { Doctor } = require("../models/doctor.model");
const { Patient } = require("../models/patient.model");
const { User } = require("../models/baseUser.model");

var activeUser

router.get("/main/:id", (req, res) => {
    User.findById(req.params.id, (err, doc) => {
        activeUser = doc
        res.render('layouts/mainLayout', {
            layout: false,
            allowSchedule: activeUser.user != 'Doctor'
        })
    })
})

router.get('/scheduleDate', (req, res) => {
    Doctor.find((err, doctors) => {
        Patient.find((err, patients) => {
            res.render('appointment/date', {
                id: activeUser.id,
                admin: activeUser.user == "Admin",
                doctors: doctors,
                patients: patients,
                minDate: dateToString(addDays(1)),
                maxDate: dateToString(addDays(30)),
                layout: 'mainLayout',
                allowSchedule: activeUser.user != 'Doctor'
            })
        })
    })
})

function addDays(days) {
    var currentdate = new Date();
    var result = new Date(currentdate);
    result.setDate(result.getDate() + days);
    return result;
}

function dateToString(date) {
    var year = date.getFullYear()
    var month = date.getMonth() + 1 < 10 ? ('0' + (date.getMonth() + 1)) : date.getMonth() + 1
    var day = date.getDate() < 10 ? ('0' + date.getDate()) : date.getDate()

    return year + '-' + month + '-' + day
}

router.post('/scheduleDate', (req, res) => {
    var times = ["08:00", "09:00", "10:00", "11:00", "13:00", "14:00", "15:00", "16:00"]

    Appointment.find({ doctorId: req.body.doctorId }, (err, docs) => {
        docs.forEach(doc => {
            if (dateToString(doc.dateTime) == req.body.date) {
                var hours = doc.dateTime.getHours()
                var hourStr = hours < 10 ? ('0' + hours) : hours
                var timeStr = hourStr + ':00'
                var index = times.indexOf(timeStr)
                if (index > -1) {
                    times.splice(index, 1)
                }
            }
        });
        if (times.length > 0) {
            res.render('appointment/time', {
                id: activeUser.id,
                doctorId: req.body.doctorId,
                patientId: activeUser.user == "Admin" ? req.body.patientId : activeUser._id,
                date: req.body.date,
                times: times,
                layout: 'mainLayout',
                allowSchedule: activeUser.user != 'Doctor'
            })
        } else {
            Doctor.find((err, doctors) => {
                Patient.find((err, patients) => {
                    res.render('appointment/date', {
                        id: activeUser.id,
                        doctors: doctors,
                        patients: patients,
                        minDate: dateToString(addDays(1)),
                        maxDate: dateToString(addDays(30)),
                        error: 'There are no free times on selected day.',
                        layout: 'mainLayout',
                        allowSchedule: activeUser.user != 'Doctor'
                    })
                })
            })
        }
    })
})

router.post('/scheduleTime', (req, res) => {
    insertRecord(req, res)
})

function insertRecord(req, res) {
    var dateTime = new Date(req.body.date + 'T' + req.body.time);

    var appointment = new Appointment();
    appointment.dateTime = dateTime;
    appointment.patientId = req.body.patientId;
    appointment.doctorId = req.body.doctorId;

    appointment.save((err, doc) => {
        if (!err) {
            res.redirect('/appointment/main/' + activeUser._id)
        } else {
            console.log('Error during insert: ' + err)
        }
    });
}

router.get('/view', (req, res) => {
    if (activeUser.user == 'Admin') {
        Appointment.find(async (err, docs) => {
            res.render('appointment/view', {
                id: activeUser.id,
                list: await appointments(docs),
                layout: 'mainLayout',
                allowSchedule: activeUser.user != 'Doctor'
            })
        })
    } else if (activeUser.user == 'Doctor') {
        Appointment.find({ doctorId: activeUser.id }, async (err, docs) => {
            res.render('appointment/view', {
                id: activeUser.id,
                list: await appointments(docs),
                layout: 'mainLayout',
                allowSchedule: activeUser.user != 'Doctor'
            })
        })
    } else if (activeUser.user == 'Patient') {
        Appointment.find({ patientId: activeUser.id }, async (err, docs) => {
            res.render('appointment/view', {
                id: activeUser.id,
                list: await appointments(docs),
                layout: 'mainLayout',
                allowSchedule: activeUser.user != 'Doctor'
            })
        })
    }
})

async function appointments(docs) {
    var dates = appointmentDates(docs)
    var times = appointmentTimes(docs)
    var patients = await appointmentPatients(docs)
    var doctors = await appointmentDoctors(docs)

    var list = new Array(times.length)

    for (let i = 0; i < times.length; i++) {
        list[i] = [dates[i], times[i], patients[i], doctors[i]]
    }

    return list
}

function appointmentDates(docs) {
    var list = new Array(docs.length)

    for (let i = 0; i < docs.length; i++) {
        list[i] = dateToString(docs[i].dateTime)
    }

    return list
}

function appointmentTimes(docs) {
    var list = new Array(docs.length)

    for (let i = 0; i < docs.length; i++) {
        var hours = docs[i].dateTime.getHours()
        var hourStr = hours < 10 ? ('0' + hours) : hours
        list[i] = hourStr + ':00'
    }

    return list
}

async function appointmentPatients(docs) {
    var list = new Array(docs.length)

    for (let i = 0; i < docs.length; i++) {
        var patient = await User.findOne({ _id: docs[i].patientId })
        list[i] = patient._doc.firstName + ' ' + patient._doc.lastName + ' (' + patient._doc.personalCode + ')'
    }

    return list
}

async function appointmentDoctors(docs) {
    var list = new Array(docs.length)

    for (let i = 0; i < docs.length; i++) {
        var doctor = await User.findOne({ _id: docs[i].doctorId })
        list[i] = doctor._doc.firstName + ' ' + doctor._doc.lastName + ' (' + doctor._doc.specialty + ')'
    }

    return list
}

module.exports = router